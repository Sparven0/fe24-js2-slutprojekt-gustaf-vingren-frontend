{"mappings":"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","sources":["<anon>","src/modules/main.ts","src/modules/Rendering Functions/initializeMember.ts","src/modules/Fetching Functions/memberFunctions.ts","src/modules/MemberClass.ts","src/modules/Fetching Functions/urls.ts","src/modules/Rendering Functions/displayingFunction.ts","src/modules/Fetching Functions/updateFunctions.ts","src/modules/Fetching Functions/getAllTasks.ts","src/modules/Rendering Functions/TaskClass.ts"],"sourcesContent":["class $61a1419b200061f5$export$3b8335eaeaa275bb {\n    constructor(username, email, role){\n        this.username = username;\n        this.email = email;\n        this.role = role;\n    }\n    // Display the current user info (assumed to be the logged-in user)\n    displayUser(username, email, role) {\n        const loginWrapper = document.querySelector('.loginWrapper');\n        const prevMember = document.querySelector('.member');\n        if (prevMember) prevMember.remove();\n        const member = document.createElement('div');\n        member.classList.add('member');\n        member.innerHTML = `\n            <div>\n                <h1>Current user</h1>\n                <br></br>\n                <h2>${username}</h2>\n                <p>${email}</p>\n                <p>${role}</p>\n            </div>`;\n        loginWrapper.append(member);\n    }\n    // Display member details\n    displayMember() {\n        const loginWrapper = document.querySelector('.loginWrapper');\n        const prevMember = document.querySelector('.member');\n        if (prevMember) prevMember.remove();\n        const member = document.createElement('div');\n        member.classList.add('member');\n        member.innerHTML = `\n            <div>\n                <h1>Current user</h1>\n                <br></br>\n                <h2>${this.username}</h2>\n                <p>${this.email}</p>\n                <p>${this.role}</p>\n            </div>`;\n        loginWrapper.append(member);\n    }\n}\n\n\nconst $ccd88fcb2f896b18$export$dd190b660255bfdd = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/members';\nconst $ccd88fcb2f896b18$export$82e58bf4407efeca = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/new-member';\nconst $ccd88fcb2f896b18$export$3b976e5ae6742b6f = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks';\nconst $ccd88fcb2f896b18$export$9bc59a7b7810c656 = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/new-task';\nconst $ccd88fcb2f896b18$export$c9f9b7fee25cfae9 = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks/';\nconst $ccd88fcb2f896b18$export$14b851330a0f8b0 = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks';\nconst $ccd88fcb2f896b18$export$f6e079619a06325b = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks/';\nconst $ccd88fcb2f896b18$export$78b9c1e902a22346 = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/assign-task/';\n\n\n\n\nasync function $296c32cd85a6333a$export$d8af3e293177d2e4(taskID, taskStatus) {\n    console.log(taskID, taskStatus);\n    const body = {\n        isComplete: taskStatus\n    };\n    const options = {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    };\n    try {\n        const response = await fetch((0, $ccd88fcb2f896b18$export$c9f9b7fee25cfae9) + taskID, options);\n        const data = await response.json();\n        console.log(data);\n    } catch (e) {\n        console.log(\"Error updating task\", e);\n    }\n}\nasync function $296c32cd85a6333a$export$f08d315250e1aa23(taskID) {\n    const options = {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n    try {\n        const response = await fetch((0, $ccd88fcb2f896b18$export$f6e079619a06325b) + taskID, options);\n        const data = await response.json();\n        await (0, $63a8eb5888c938a0$export$9516eb7ae2debb86)();\n        console.log(data);\n    } catch (e) {\n        console.log(\"Error deleting task\", e);\n    }\n}\nasync function $296c32cd85a6333a$export$6fb927533e33c19f(taskID, username) {\n    const body = {\n        username: username\n    };\n    const options = {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    };\n    try {\n        const response = await fetch((0, $ccd88fcb2f896b18$export$78b9c1e902a22346) + taskID, options);\n        const data = await response.json();\n        console.log(data);\n    } catch (e) {\n        console.log(\"Error updating task\", e);\n    }\n}\n\n\n\n\n\nasync function $bd0af301607e61d9$export$d1f442602a91e7cc() {\n    try {\n        const response = await fetch((0, $ccd88fcb2f896b18$export$14b851330a0f8b0));\n        const tasks = await response.json();\n        return tasks;\n    } catch (e) {\n        console.log('Error getting tasks', e);\n        return [];\n    }\n}\n\n\nasync function $63a8eb5888c938a0$export$1c8f61c1db5300d2() {\n    const raw = await fetch(`${(0, $ccd88fcb2f896b18$export$14b851330a0f8b0)}`);\n    const tasks = await raw.json();\n    tasks.forEach((task)=>{\n        const status = task.isComplete;\n        if (status == true) $63a8eb5888c938a0$export$4db8688a7d2f0d0b(task);\n    });\n    return tasks;\n}\nasync function $63a8eb5888c938a0$export$e2f2ebb8b3048124() {\n    const incompleteTasksList = document.querySelector(\"#incompleteTasks\");\n    incompleteTasksList.innerHTML = \"\";\n    const raw = await fetch(`${(0, $ccd88fcb2f896b18$export$14b851330a0f8b0)}`);\n    const tasks = await raw.json();\n    tasks.forEach((task)=>{\n        if (task.username !== \"not-assigned\" && task.isComplete == false) $63a8eb5888c938a0$export$6a75eb26f8a10018(task);\n    });\n    return tasks;\n}\nasync function $63a8eb5888c938a0$export$32d4a25b5d64945c(username) {\n    await $63a8eb5888c938a0$var$removeElements();\n    const raw = await fetch(`${(0, $ccd88fcb2f896b18$export$3b976e5ae6742b6f)}/${username}`);\n    const tasks = await raw.json();\n    tasks.forEach((task)=>{\n        if (task.isComplete == false && task.username !== \"not-assigned\") $63a8eb5888c938a0$export$c125ae63e3017b3f(task);\n    });\n    return tasks;\n}\nasync function $63a8eb5888c938a0$export$9516eb7ae2debb86() {\n    const tasks = await (0, $bd0af301607e61d9$export$d1f442602a91e7cc)();\n    tasks.forEach((task)=>{\n        if (task.username == \"not-assigned\") $63a8eb5888c938a0$export$324249bdac25123c(task);\n    });\n    return tasks;\n}\n// inte färdiga men assigned\nasync function $63a8eb5888c938a0$var$removeElements() {\n    const inCompleteTasksList = document.querySelector(\"#incompleteTasks\");\n    inCompleteTasksList.innerHTML = \"\";\n}\nasync function $63a8eb5888c938a0$export$c125ae63e3017b3f(task) {\n    await $63a8eb5888c938a0$var$removeElements();\n    const inCompleteTasksList = document.querySelector(\"#incompleteTasks\");\n    const taskElement = document.createElement(\"li\");\n    taskElement.classList.add(\"taskElement\");\n    const boxDiv = document.createElement(\"div\");\n    boxDiv.classList.add(\"boxDiv\");\n    const updateCheckbox = document.createElement(\"input\");\n    const label = document.createElement(\"label\");\n    label.innerText = \"Completed\";\n    updateCheckbox.type = \"checkbox\";\n    updateCheckbox.id = \"isCompletedBox\";\n    updateCheckbox.addEventListener(\"change\", async (e)=>{\n        await $63a8eb5888c938a0$export$9516eb7ae2debb86();\n        await $63a8eb5888c938a0$export$1c8f61c1db5300d2();\n        await (0, $296c32cd85a6333a$export$d8af3e293177d2e4)(task.id, updateCheckbox.checked);\n        if (updateCheckbox.checked) {\n            const prevDOM = document.querySelectorAll(\".taskElementC\");\n            prevDOM.forEach((element)=>{\n                element.remove();\n            });\n            inCompleteTasksList.removeChild(taskElement);\n        }\n        await $63a8eb5888c938a0$export$1c8f61c1db5300d2();\n    });\n    boxDiv.append(updateCheckbox, label);\n    taskElement.innerHTML = `\n  <p class=\"taskElementTitle\">${task.title}</p>\n<p class=\"taskElementText\">Description:</p> ${task.description}\n<p class=\"taskElementText\">Assigned to: ${task.username}</p>\n<p class=\"taskElementText\">Due date: </p>${task.dueDate}\n<p class=\"taskElementText\">Created: </p>${task.timeStamp}`;\n    taskElement.append(boxDiv);\n    inCompleteTasksList.append(taskElement);\n}\nfunction $63a8eb5888c938a0$export$4db8688a7d2f0d0b(task) {\n    const completedTasksList = document.querySelector(\"#completedTasks\");\n    const taskElementC = document.createElement(\"li\");\n    taskElementC.classList.add(\"taskElementC\");\n    const removeBtn = document.createElement(\"button\");\n    removeBtn.innerHTML = \"Remove task\";\n    removeBtn.classList.add(\"removeBtn\");\n    removeBtn.addEventListener(\"click\", async (e)=>{\n        await (0, $296c32cd85a6333a$export$f08d315250e1aa23)(task.id);\n        taskElementC.remove();\n        const inCompleteTasksList = document.querySelector(\"#incompleteTasks\");\n        const incompleteTaskElements = inCompleteTasksList.querySelectorAll(\".taskElement\");\n        incompleteTaskElements.forEach((element)=>{\n            if (element.innerHTML.includes(task.description)) inCompleteTasksList.removeChild(element);\n        });\n    });\n    taskElementC.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class=\"taskElementCtext\">Description: ${task.description}</p> <p class=\"taskElementCtext\">Completed by: ${task.username}</p>`;\n    taskElementC.append(removeBtn);\n    completedTasksList.append(taskElementC);\n}\nfunction $63a8eb5888c938a0$export$be3786f943b19b29(task) {}\nasync function $63a8eb5888c938a0$export$324249bdac25123c(task) {\n    const notAssignedTasksList = document.querySelector(\"#notAssignedTasks\");\n    notAssignedTasksList.innerHTML = \"\";\n    const taskElementN = document.createElement(\"li\");\n    taskElementN.classList.add(\"taskElementN\");\n    taskElementN.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class=\"taskElementCtext\">Description: ${task.description}</p> <p class=\"taskElementCtext\">Assigned to: ${task.username}</p> <p class=\"taskElementCtext>Role: ${task.role}</p><p class=\"taskElementCtext>Due: ${task.dueDate}</p><p class=\"taskElementCtext>Created: ${task.timeStamp}</p>`;\n    const assignUsersForm = document.createElement(\"form\");\n    assignUsersForm.id = \"assignUserForm\";\n    const assignedMemberOptions = document.createElement(\"select\");\n    assignedMemberOptions.id = \"assignedMemberOptions2\";\n    const notAssignedOption = document.createElement(\"option\");\n    notAssignedOption.value = \"not-assigned\";\n    notAssignedOption.innerText = \"Not Assigned\";\n    assignedMemberOptions.append(notAssignedOption);\n    const members = await (0, $542f0c3884e1da14$export$2774c37398bee8b2)();\n    members.forEach((member)=>{\n        if (member.role === task.role) {\n            const option = document.createElement(\"option\");\n            option.value = member.username;\n            option.innerText = `${member.username} (Role: ${member.role})`;\n            assignedMemberOptions.append(option);\n        }\n    });\n    const saveBtn = document.createElement(\"button\");\n    saveBtn.id = \"saveBtn\";\n    saveBtn.type = \"submit\";\n    saveBtn.innerHTML = \"Save changes\";\n    saveBtn.addEventListener(\"click\", async (e)=>{\n        e.preventDefault();\n        const selectedUsername = assignedMemberOptions.value;\n        const selectedMember = members.find((member)=>member.username === selectedUsername);\n        if (selectedMember && selectedMember.role === task.role) {\n            await (0, $296c32cd85a6333a$export$6fb927533e33c19f)(task.id, selectedUsername);\n            taskElementN.remove();\n            $63a8eb5888c938a0$export$e2f2ebb8b3048124();\n        } else alert(`Please select a user with the role: ${task.role}`);\n    });\n    assignUsersForm.append(assignedMemberOptions, saveBtn);\n    taskElementN.append(assignUsersForm);\n    notAssignedTasksList.append(taskElementN);\n}\nfunction $63a8eb5888c938a0$export$6a75eb26f8a10018(task) {\n    const inCompleteTasksList = document.querySelector(\"#incompleteTasks\");\n    const taskElementP = document.createElement(\"li\");\n    taskElementP.classList.add(\"taskElement\");\n    taskElementP.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class =\"taskElementText\">Role: ${task.role}</p><p class=\"taskElementPtext\">Description:</p> ${task.description} <p class=\"taskElementPtext\">Assigned to: ${task.username}</p><p class=\"taskElementPtext\">Created: ${task.timeStamp}</p><p class=\"\"taskElementPtext>Due: ${task.dueDate}</p>`;\n    inCompleteTasksList.append(taskElementP);\n}\nasync function $63a8eb5888c938a0$export$e161bc0b9865a0b7(selectElement) {\n    selectElement.innerHTML = \"\";\n    const members = await (0, $542f0c3884e1da14$export$2774c37398bee8b2)();\n    const notAssignedOption = document.createElement(\"option\");\n    notAssignedOption.value = \"not-assigned\";\n    notAssignedOption.innerText = \"Not Assigned\";\n    const anyOptions = document.createElement(\"option\");\n    anyOptions.value = \"any\";\n    anyOptions.innerText = \"any\";\n    members.forEach((member)=>{\n        const option = document.createElement(\"option\");\n        option.value = member.username, member.role;\n        option.innerText = `Member: ${member.username}, Role: ${member.role}`;\n        selectElement.append(notAssignedOption, option, anyOptions);\n    });\n}\n\n\n\n\nasync function $542f0c3884e1da14$export$2774c37398bee8b2() {\n    const response = await fetch((0, $ccd88fcb2f896b18$export$dd190b660255bfdd));\n    const data = await response.json();\n    console.log(data);\n    return data.members.map((member)=>new (0, $61a1419b200061f5$export$3b8335eaeaa275bb)(member.username, member.email, member.role));\n}\nasync function $542f0c3884e1da14$export$de7836936cff7bdc(username, email, role) {\n    const body = {\n        username: username,\n        email: email,\n        role: role,\n        id: Date.now()\n    };\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    };\n    try {\n        const currentMemebers = await $542f0c3884e1da14$export$2774c37398bee8b2();\n        currentMemebers.forEach((member)=>{\n            if (username === member.username) {\n                alert('Username already exists');\n                return;\n            }\n        });\n        const response = await fetch((0, $ccd88fcb2f896b18$export$82e58bf4407efeca), options);\n        const data = await response.json();\n        await (0, $017ef8b2feb1dd2e$export$1c8c8f897dfba1a8)(username);\n        await (0, $63a8eb5888c938a0$export$e161bc0b9865a0b7)((0, $050458113e8d78dc$export$42e24cc2afc41ad1));\n        console.log(data);\n    } catch (error) {\n        console.log(error);\n    }\n}\nasync function $542f0c3884e1da14$export$e426fadba00ce51d(username) {\n    try {\n        const res = await fetch(`${(0, $ccd88fcb2f896b18$export$3b976e5ae6742b6f)}/${username}`);\n        const data = await res.json();\n        console.log(data);\n        if (res.status === 404 || data.length === 0) {\n            console.log('Username not found');\n            // alert(\"Can't find any tasks for this user!\");\n            return data;\n        }\n        return data;\n    } catch (e) {\n        console.log('Error getting tasks', e);\n    }\n}\n// lägg till tasks för användare / not assigned to user yet\nfunction $542f0c3884e1da14$var$formatTimestamp(timeStamp) {\n    const date = new Date(timeStamp);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    });\n}\nasync function $542f0c3884e1da14$export$9d4481e90f4ba95c(taskData) {\n    const formattedTimestamp = $542f0c3884e1da14$var$formatTimestamp(new Date().toISOString());\n    const members = await $542f0c3884e1da14$export$2774c37398bee8b2();\n    if (taskData.username === 'not-assigned') {\n        const body = {\n            title: taskData.title,\n            username: taskData.username,\n            role: taskData.role,\n            description: taskData.description,\n            dueDate: taskData.dueDate,\n            id: Date.now(),\n            isComplete: false,\n            timeStamp: formattedTimestamp\n        };\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        };\n        try {\n            const response = await fetch((0, $ccd88fcb2f896b18$export$9bc59a7b7810c656), options);\n            const data = await response.json();\n            console.log(data);\n        } catch (e) {\n            console.log('Error writing task', e);\n        }\n        return;\n    }\n    // Case 2: Task username matches a member's username, proceed with POST request\n    const user = members.find((member)=>member.username === taskData.username);\n    if (user) {\n        // Check role mismatch\n        if (user.role !== taskData.role && taskData.role !== 'not-assigned') {\n            alert(\"Incorrect role.. not their job!\");\n            console.log('Role mismatch: User role does not match task role, user-role:', taskData.role);\n            throw new Error('Role mismatch: User role does not match task role');\n        }\n        const body = {\n            username: taskData.username,\n            role: taskData.role,\n            description: taskData.description,\n            dueDate: taskData.dueDate,\n            id: Date.now(),\n            isComplete: false,\n            timeStamp: formattedTimestamp\n        };\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        };\n        try {\n            const response = await fetch((0, $ccd88fcb2f896b18$export$9bc59a7b7810c656), options);\n            const data = await response.json();\n            console.log(data);\n        } catch (e) {\n            console.log('Error writing task', e);\n        }\n        return; // Exit the function after successfully writing the task\n    }\n    // Case 3: If no matching user and not 'not-assigned', throw an error\n    console.log('User not found or task role mismatch');\n    throw new Error('Username not found or task role mismatch');\n}\n\n\nasync function $017ef8b2feb1dd2e$export$1c8c8f897dfba1a8(username) {\n    const members = await (0, $542f0c3884e1da14$export$2774c37398bee8b2)();\n    const member = members.find((member)=>member.username === username);\n    if (member) member.displayMember();\n}\n\n\n\n\n\nclass $d20e1950a5e30632$export$2dea7024bcdd7731 {\n    constructor(title, username, role, description, dueDate, isComplete, timeStamp){\n        this.title = title;\n        this.username = username;\n        this.description = description;\n        this.role = role;\n        this.dueDate = dueDate;\n        this.isComplete = isComplete;\n        this.timeStamp = timeStamp || new Date().toISOString(); // Default to current time\n    }\n    // Create a new task and send it to the server using the writeTaskForMember function\n    async createNewTask() {\n        const taskData = {\n            title: this.title,\n            username: this.username,\n            role: this.role,\n            description: this.description,\n            dueDate: this.dueDate,\n            isComplete: this.isComplete,\n            timeStamp: this.timeStamp // Include the timestamp\n        };\n        await (0, $542f0c3884e1da14$export$9d4481e90f4ba95c)(taskData); // Send the task data to the server\n    }\n    static async displayTasks(username) {\n        const previousDOM = document.querySelectorAll('.taskElement');\n        previousDOM.forEach((element)=>{\n            element.remove();\n        });\n        const tasks = await (0, $542f0c3884e1da14$export$e426fadba00ce51d)(username); // Assuming this fetches the tasks for the user\n        tasks.forEach((task)=>{\n            if (task.username === 'not-assigned') {\n                const taskElement = document.createElement('div');\n                taskElement.classList.add('taskElementLoggedIn');\n                taskElement.innerHTML = `\n                <p>Title: ${task.title}</p>\n                    <p>Assigned to: ${task.username}</p>\n                    <p>For role: ${task.role}</p>\n                    <p>Task: ${task.description}</p>\n                    <p>Deadline: ${task.dueDate}</p>\n                    <p>Task ID: ${task.id}</p>\n                    <input type=\"checkbox\" id=\"isCompletedBox\">Status: ${task.isComplete}</input>`;\n                const isCompletedBox = taskElement.querySelector('#isCompletedBox');\n                if (task.isComplete) isCompletedBox.checked = true;\n                else isCompletedBox.checked = false;\n                isCompletedBox.addEventListener('change', async (e)=>{\n                    await (0, $296c32cd85a6333a$export$d8af3e293177d2e4)(task.id, isCompletedBox.checked);\n                    $d20e1950a5e30632$export$2dea7024bcdd7731.displayTasks(task.username); // Refresh task list after update\n                });\n                document.body.appendChild(taskElement);\n            }\n        });\n    }\n}\n\n\n\nconst $050458113e8d78dc$export$56c2ba9e13461f38 = document.querySelector(\"#loginForm\");\n$050458113e8d78dc$export$56c2ba9e13461f38.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const formData = new FormData($050458113e8d78dc$export$56c2ba9e13461f38);\n    const username = formData.get(\"username\");\n    (0, $63a8eb5888c938a0$export$32d4a25b5d64945c)(username);\n    (0, $017ef8b2feb1dd2e$export$1c8c8f897dfba1a8)(username);\n});\nconst $050458113e8d78dc$var$addTaskForm = document.querySelector(\"#addTaskForm\");\n$050458113e8d78dc$var$addTaskForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    const prevDOM = document.querySelectorAll(\".taskElementP\");\n    if (prevDOM) prevDOM.forEach((element)=>{\n        element.remove();\n    });\n    const formData = new FormData($050458113e8d78dc$var$addTaskForm);\n    const title = formData.get(\"title\");\n    const username = formData.get(\"assignedMember\");\n    const description = formData.get(\"description\");\n    const dueDate = formData.get(\"due\");\n    const role = formData.get(\"role\");\n    const newTask = new (0, $d20e1950a5e30632$export$2dea7024bcdd7731)(title, username, role, description, dueDate, false);\n    await newTask.createNewTask();\n    await (0, $63a8eb5888c938a0$export$9516eb7ae2debb86)();\n    await (0, $63a8eb5888c938a0$export$e2f2ebb8b3048124)();\n});\nconst $050458113e8d78dc$var$createUserForm = document.querySelector('#createAccountForm');\n$050458113e8d78dc$var$createUserForm.addEventListener('submit', async (e)=>{\n    const formData = new FormData($050458113e8d78dc$var$createUserForm);\n    const username = formData.get('username');\n    const email = formData.get('email');\n    const role = formData.get('role');\n    e.preventDefault();\n    await (0, $542f0c3884e1da14$export$de7836936cff7bdc)(username, email, role);\n});\n(0, $63a8eb5888c938a0$export$1c8f61c1db5300d2)();\nconst $050458113e8d78dc$export$42e24cc2afc41ad1 = document.querySelector(\"#assignedMember\");\nconst $050458113e8d78dc$var$memberSelectFilter = document.querySelector(\"#userFilter\");\n(0, $63a8eb5888c938a0$export$e161bc0b9865a0b7)($050458113e8d78dc$export$42e24cc2afc41ad1);\n(0, $63a8eb5888c938a0$export$e161bc0b9865a0b7)($050458113e8d78dc$var$memberSelectFilter);\n(0, $63a8eb5888c938a0$export$e2f2ebb8b3048124)();\n(0, $63a8eb5888c938a0$export$9516eb7ae2debb86)();\nconst $050458113e8d78dc$var$createAccountDropDown = document.querySelector('.createAccountDropDown');\nconst $050458113e8d78dc$var$filterDropDown = document.querySelector('.filterDropDown');\nconst $050458113e8d78dc$var$createAccountBox = document.querySelector('.createAccount');\nconst $050458113e8d78dc$var$createAccountArrow = document.querySelector('.createAccountI');\nconst $050458113e8d78dc$var$filterBox = document.querySelector('.filters');\nconst $050458113e8d78dc$var$filterArrow = document.querySelector('.filterI');\n$050458113e8d78dc$var$createAccountDropDown.addEventListener('click', ()=>{\n    $050458113e8d78dc$var$createAccountBox.classList.toggle('createAccountShow');\n    $050458113e8d78dc$var$createAccountArrow?.classList.toggle('createAccountI');\n});\n$050458113e8d78dc$var$filterDropDown.addEventListener('click', ()=>{\n    $050458113e8d78dc$var$filterBox.classList.toggle('filtersShow');\n    $050458113e8d78dc$var$filterArrow?.classList.toggle('filterI');\n});\n\n\n//# sourceMappingURL=index.42363fcf.js.map\n","import { initMember } from \"./Rendering Functions/initializeMember\";\nimport { displayOptions } from \"./Rendering Functions/displayingFunction\";\nimport { checkMemberTask } from \"./Rendering Functions/displayingFunction\";\nimport { Task } from \"./Rendering Functions/TaskClass\";\nimport { checkNotAssignedTask } from \"./Rendering Functions/displayingFunction\";\nimport { checkTasksNotLoggedIn } from \"./Rendering Functions/displayingFunction\";\nimport { checkStatus } from \"./Rendering Functions/displayingFunction\";\nimport { postNew } from \"./Fetching Functions/memberFunctions\";\n\n\n\n// main.ts importerar och kör alla funktioner som körs \"villkorslöst\", dvs de som körs oavsett användarinteraktion.\n// main.ts hanterar även de mest basala interaktioner såsom att logga in, skapa nya tasks samt skapa nya användare\n\n\nexport const loginForm = document.querySelector(\n  \"#loginForm\"\n) as HTMLFormElement;\nloginForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const formData = new FormData(loginForm);\n  const username = formData.get(\"username\") as string;\n  checkMemberTask(username);\n  initMember(username);\n});\n\nconst addTaskForm = document.querySelector(\"#addTaskForm\") as HTMLFormElement;\naddTaskForm.addEventListener(\"submit\", async (e) => {\n  e.preventDefault();\n  const prevDOM = document.querySelectorAll(\".taskElementP\");\n  if (prevDOM) {\n    prevDOM.forEach((element) => {\n      element.remove();\n    });\n  }\n  \n  const formData = new FormData(addTaskForm);\n  const title = formData.get(\"title\") as string;\n  const username = formData.get(\"assignedMember\") as string;\n  const description = formData.get(\"description\") as string;\n  const dueDate = formData.get(\"due\") as string;\n  const role = formData.get(\"role\") as string;\n  \n  const newTask = new Task(title, username, role, description, dueDate, false);\n  await newTask.createNewTask(); \n  await checkNotAssignedTask();\n  await checkTasksNotLoggedIn();\n});\n\n\nconst createUserForm = document.querySelector('#createAccountForm') as HTMLFormElement;\n\ncreateUserForm.addEventListener('submit', async (e) => {\n        const formData = new FormData(createUserForm);\n        const username = formData.get('username') as string;\n        const email = formData.get('email') as string;\n        const role = formData.get('role') as string;\n    e.preventDefault();\n    await postNew(username, email, role);\n    \n    }\n)\n\n\n\n\ncheckStatus();\nexport const memberSelect = document.querySelector(\"#assignedMember\") as HTMLSelectElement;\nconst memberSelectFilter = document.querySelector(\"#userFilter\") as HTMLSelectElement;\ndisplayOptions(memberSelect);\ndisplayOptions(memberSelectFilter);\ncheckTasksNotLoggedIn();\ncheckNotAssignedTask();\n\n\n\n\nconst createAccountDropDown = document.querySelector('.createAccountDropDown') as HTMLDivElement;\n\nconst filterDropDown = document.querySelector('.filterDropDown') as HTMLDivElement;\nconst createAccountBox = document.querySelector('.createAccount') as HTMLDivElement;\nconst createAccountArrow = document.querySelector('.createAccountI');\nconst filterBox = document.querySelector('.filters') as HTMLDivElement;\nconst filterArrow = document.querySelector('.filterI');\n\n\ncreateAccountDropDown.addEventListener('click', () => {\n  createAccountBox.classList.toggle('createAccountShow')\ncreateAccountArrow?.classList.toggle('createAccountI')\n})\n\nfilterDropDown.addEventListener('click', () => {\nfilterBox.classList.toggle('filtersShow')\nfilterArrow?.classList.toggle('filterI')\n})\n\n\n\n","import { getAll } from \"../Fetching Functions/memberFunctions\";\nimport { Member } from \"../MemberClass\";\nimport { getTasksForMember } from \"../Fetching Functions/memberFunctions\";\n\n\n// initialisera membern\n\nexport async function initMember(username: string): Promise<void> {\n    const members: Member[] = await getAll();\n    const member = members.find(member => member.username === username);\n    if (member) {\n        member.displayMember();\n    }\n}\n\n","import { Member } from \"../MemberClass\";\nimport { getMembersUrl } from \"./urls\";\nimport { postNewMemberUrl } from \"./urls\";\nimport { getTasksForMemberUrl } from \"./urls\";\nimport { writeTaskForMemberUrl } from \"./urls\";\nimport { displayOptions } from \"../Rendering Functions/displayingFunction\";\nimport { initMember } from \"../Rendering Functions/initializeMember\";\nimport { memberSelect } from \"../main\";\n\n\n\n\n// läsa alla members\n\nexport async function getAll(): Promise<Member[]> {;\n    const response = await fetch(getMembersUrl);\n    const data = await response.json();\n    console.log(data);\n    return data.members.map(member => new Member(member.username, member.email, member.role));\n}\n\n\n// lägga till ny användare\n\n\nexport async function postNew(username: string, email: string, role: string): Promise<void> {\n    const body = {\n        username: username,\n        email: email,\n        role: role,\n        id: Date.now()\n    };\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    };\n    try {\n        const currentMemebers = await getAll();\n        currentMemebers.forEach(member => {\n            if(username === member.username){\n            alert('Username already exists');\n        return;}\n        })\n        const response = await fetch(postNewMemberUrl, options);\n        const data = await response.json();\n        await initMember(username);\n        await displayOptions(memberSelect)\n        console.log(data);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// hämta tasks för användare\n\nexport async function getTasksForMember(username: string): Promise<any> {\n    try {\n        const res = await fetch(`${getTasksForMemberUrl}/${username}`);\n        const data = await res.json();\n        console.log(data)\n        if (res.status === 404 || data.length === 0) {\n            console.log('Username not found');\n            // alert(\"Can't find any tasks for this user!\");\n            return data\n        }\n        return data;\n    } catch (e) {\n        console.log('Error getting tasks', e);\n    }\n}\n\n\n\n// lägg till tasks för användare / not assigned to user yet\n\nfunction formatTimestamp(timeStamp: string): string {\n    const date = new Date(timeStamp);\n    return date.toLocaleDateString('en-US', { // Change locale if needed\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n    });\n}\n\nexport async function writeTaskForMember(taskData): Promise<void> {\n    const formattedTimestamp = formatTimestamp(new Date().toISOString());\n\n    const members = await getAll(); \n    if (taskData.username === 'not-assigned') {\n        const body = {\n            title: taskData.title,\n            username: taskData.username,\n            role: taskData.role,\n            description: taskData.description,\n            dueDate: taskData.dueDate,\n            id: Date.now(),\n            isComplete: false,\n            timeStamp: formattedTimestamp\n        };\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        };\n\n        try {\n            const response = await fetch(writeTaskForMemberUrl, options);\n            const data = await response.json();\n            console.log(data);\n        } catch (e) {\n            console.log('Error writing task', e);\n        }\n        return;\n    }\n\n    // Case 2: Task username matches a member's username, proceed with POST request\n    const user = members.find((member) => member.username === taskData.username);\n    \n    if (user) {\n        // Check role mismatch\n        if (user.role !== taskData.role && taskData.role !== 'not-assigned') {\n            alert(\"Incorrect role.. not their job!\")\n            console.log('Role mismatch: User role does not match task role, user-role:', taskData.role);\n            throw new Error('Role mismatch: User role does not match task role');\n        }\n\n        const body = {\n            username: taskData.username,\n            role: taskData.role,\n            description: taskData.description,\n            dueDate: taskData.dueDate,\n            id: Date.now(),\n            isComplete: false,\n            timeStamp: formattedTimestamp\n        };\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        };\n\n        try {\n            const response = await fetch(writeTaskForMemberUrl, options);\n            const data = await response.json();\n            console.log(data);\n        } catch (e) {\n            console.log('Error writing task', e);\n        }\n\n        return; // Exit the function after successfully writing the task\n    }\n\n    // Case 3: If no matching user and not 'not-assigned', throw an error\n    console.log('User not found or task role mismatch');\n    throw new Error('Username not found or task role mismatch');\n}\n\n\n\n\n","\nexport class Member {\n    public username: string;\n    public email: string;\n    public role: string;\n\n    constructor(username: string, email: string, role: string) {\n        this.username = username;\n        this.email = email;\n        this.role = role;\n    }\n\n    // Display the current user info (assumed to be the logged-in user)\n    displayUser(username: string, email: string, role: string): void {\n        const loginWrapper = document.querySelector('.loginWrapper') as HTMLDivElement;\n        const prevMember = document.querySelector('.member');\n        if (prevMember) {\n            prevMember.remove();\n        }\n        const member = document.createElement('div');\n        member.classList.add('member');\n        member.innerHTML = `\n            <div>\n                <h1>Current user</h1>\n                <br></br>\n                <h2>${username}</h2>\n                <p>${email}</p>\n                <p>${role}</p>\n            </div>`;\n        loginWrapper.append(member);\n    }\n    // Display member details\n    displayMember(): void {\n        const loginWrapper = document.querySelector('.loginWrapper') as HTMLDivElement;\n        const prevMember = document.querySelector('.member');\n        if (prevMember) {\n            prevMember.remove();\n        }\n        const member = document.createElement('div');\n        member.classList.add('member');\n        member.innerHTML = `\n            <div>\n                <h1>Current user</h1>\n                <br></br>\n                <h2>${this.username}</h2>\n                <p>${this.email}</p>\n                <p>${this.role}</p>\n            </div>`;\n        loginWrapper.append(member);\n    }\n}\n","export const getMembersUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/members';\nexport const postNewMemberUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/new-member';\nexport const getTasksForMemberUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks';\nexport const writeTaskForMemberUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/new-task';\nexport const updateIsCompleteUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks/';\nexport const getAllTasksUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks';\nexport const deleteTaskUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/tasks/';\nexport const updateAssignedUserUrl = 'https://fe24-js2-slutprojekt-gustaf-vingren.onrender.com/assign-task/';","import { updateIsComplete } from \"../Fetching Functions/updateFunctions\";\nimport {\n  getAllTasksUrl,\n  getTasksForMemberUrl,\n} from \"../Fetching Functions/urls\";\nimport { Task } from \"./TaskClass\";\nimport { getAll } from \"../Fetching Functions/memberFunctions\";\nimport { deleteTask } from \"../Fetching Functions/updateFunctions\";\nimport { updateAssignedUser } from \"../Fetching Functions/updateFunctions\";\nimport { getAllTasks } from \"../Fetching Functions/getAllTasks\";\n\n// kontrolerar status på tasks och visar de som är färdiga\n\nexport async function checkStatus(): Promise<Task[]> {\n  const raw = await fetch(`${getAllTasksUrl}`);\n  const tasks = await raw.json();\n  tasks.forEach((task) => {\n    const status = task.isComplete;\n    if (status == true) {\n      displayTaskAsComplete(task);\n    }\n  });\n  return tasks;\n}\n\n// visar alla tasks för alla användare FÖRUTOM de som inte är not assigned\n\nexport async function checkTasksNotLoggedIn(): Promise<Task[]> {\n  const incompleteTasksList = document.querySelector(\n    \"#incompleteTasks\"\n  ) as HTMLDListElement;\n  incompleteTasksList.innerHTML = \"\";\n  const raw = await fetch(`${getAllTasksUrl}`);\n  const tasks = await raw.json();\n  tasks.forEach((task) => {\n    if (task.username !== \"not-assigned\" && task.isComplete == false) {\n      displayNotLoggedInTasks(task);\n    }\n  });\n  return tasks;\n}\n\n// kontrollerar tasks för användare och visar de som inte är färdiga när \"inloggad\"\n\nexport async function checkMemberTask(username): Promise<Task[]> {\n  await removeElements();\n  const raw = await fetch(`${getTasksForMemberUrl}/${username}`);\n  const tasks = await raw.json();\n  tasks.forEach((task) => {\n    if (task.isComplete == false && task.username !== \"not-assigned\") {\n      displayTaskAsProgress(task);\n    }\n  });\n  return tasks;\n}\n\n// checkar inte assigned tasks och visar de\n\nexport async function checkNotAssignedTask(): Promise<Task[]> {\n  const tasks = await getAllTasks();\n  tasks.forEach((task) => {\n    if (task.username == \"not-assigned\") {\n      displayNotAssignedTask(task);\n    }\n  });\n  return tasks;\n}\n\n// inte färdiga men assigned\n\nasync function removeElements() {\n  const inCompleteTasksList = document.querySelector(\n    \"#incompleteTasks\"\n  ) as HTMLDListElement;\n  inCompleteTasksList.innerHTML = \"\";\n}\n\nexport async function displayTaskAsProgress(task): Promise<void> {\n  await removeElements();\n  const inCompleteTasksList = document.querySelector(\n    \"#incompleteTasks\"\n  ) as HTMLDListElement;\n  const taskElement = document.createElement(\"li\");\n  taskElement.classList.add(\"taskElement\");\n  const boxDiv = document.createElement(\"div\");\n  boxDiv.classList.add(\"boxDiv\");\n  const updateCheckbox = document.createElement(\"input\");\n  const label = document.createElement(\"label\");\n  label.innerText = \"Completed\";\n  updateCheckbox.type = \"checkbox\";\n  updateCheckbox.id = \"isCompletedBox\";\n  updateCheckbox.addEventListener(\"change\", async (e) => {\n    await checkNotAssignedTask();\n    await checkStatus();\n\n    await updateIsComplete(task.id, updateCheckbox.checked);\n    if (updateCheckbox.checked) {\n      const prevDOM = document.querySelectorAll(\".taskElementC\");\n      prevDOM.forEach((element) => {\n        element.remove();\n      });\n      inCompleteTasksList.removeChild(taskElement);\n    }\n    await checkStatus();\n  });\n  boxDiv.append(updateCheckbox, label);\n  taskElement.innerHTML = `\n  <p class=\"taskElementTitle\">${task.title}</p>\n<p class=\"taskElementText\">Description:</p> ${task.description}\n<p class=\"taskElementText\">Assigned to: ${task.username}</p>\n<p class=\"taskElementText\">Due date: </p>${task.dueDate}\n<p class=\"taskElementText\">Created: </p>${task.timeStamp}`;\n  taskElement.append(boxDiv);\n  inCompleteTasksList.append(taskElement);\n}\n\n// färdiga\n\nexport function displayTaskAsComplete(task): void {\n  const completedTasksList = document.querySelector(\n    \"#completedTasks\"\n  ) as HTMLDListElement;\n  const taskElementC = document.createElement(\"li\");\n  taskElementC.classList.add(\"taskElementC\");\n  const removeBtn = document.createElement(\"button\");\n  removeBtn.innerHTML = \"Remove task\";\n  removeBtn.classList.add(\"removeBtn\");\n  removeBtn.addEventListener(\"click\", async (e) => {\n    await deleteTask(task.id);\n    taskElementC.remove();\n    const inCompleteTasksList = document.querySelector(\n      \"#incompleteTasks\"\n    ) as HTMLDListElement;\n    const incompleteTaskElements =\n      inCompleteTasksList.querySelectorAll(\".taskElement\");\n    incompleteTaskElements.forEach((element) => {\n      if (element.innerHTML.includes(task.description)) {\n        inCompleteTasksList.removeChild(element);\n      }\n    });\n  });\n  taskElementC.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class=\"taskElementCtext\">Description: ${task.description}</p> <p class=\"taskElementCtext\">Completed by: ${task.username}</p>`;\n  taskElementC.append(removeBtn);\n\n  completedTasksList.append(taskElementC);\n}\n\nexport function displayTaskAsPending(task): void {}\n\n// not assigned\n\nexport async function displayNotAssignedTask(task): Promise<void> {\n  const notAssignedTasksList = document.querySelector(\n    \"#notAssignedTasks\"\n  ) as HTMLDListElement;\n  notAssignedTasksList.innerHTML = \"\";\n  const taskElementN = document.createElement(\"li\");\n  taskElementN.classList.add(\"taskElementN\");\n  taskElementN.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class=\"taskElementCtext\">Description: ${task.description}</p> <p class=\"taskElementCtext\">Assigned to: ${task.username}</p> <p class=\"taskElementCtext>Role: ${task.role}</p><p class=\"taskElementCtext>Due: ${task.dueDate}</p><p class=\"taskElementCtext>Created: ${task.timeStamp}</p>`;\n  const assignUsersForm = document.createElement(\"form\");\n  assignUsersForm.id = \"assignUserForm\";\n  const assignedMemberOptions = document.createElement(\"select\");\n  assignedMemberOptions.id = \"assignedMemberOptions2\";\n  const notAssignedOption = document.createElement(\"option\");\n  notAssignedOption.value = \"not-assigned\";\n  notAssignedOption.innerText = \"Not Assigned\";\n  assignedMemberOptions.append(notAssignedOption);\n\n  const members = await getAll();\n  members.forEach((member) => {\n    if (member.role === task.role) {\n      const option = document.createElement(\"option\");\n      option.value = member.username;\n      option.innerText = `${member.username} (Role: ${member.role})`;\n      assignedMemberOptions.append(option);\n    }\n  });\n\n  const saveBtn = document.createElement(\"button\");\n  saveBtn.id = \"saveBtn\";\n  saveBtn.type = \"submit\";\n  saveBtn.innerHTML = \"Save changes\";\n\n  saveBtn.addEventListener(\"click\", async (e) => {\n    e.preventDefault();\n    const selectedUsername = assignedMemberOptions.value;\n    const selectedMember = members.find(\n      (member) => member.username === selectedUsername\n    );\n\n    if (selectedMember && selectedMember.role === task.role) {\n      await updateAssignedUser(task.id, selectedUsername);\n      taskElementN.remove();\n      checkTasksNotLoggedIn();\n    } else {\n      alert(`Please select a user with the role: ${task.role}`);\n    }\n  });\n\n  assignUsersForm.append(assignedMemberOptions, saveBtn);\n  taskElementN.append(assignUsersForm);\n  notAssignedTasksList.append(taskElementN);\n}\n\n// visar tasks utan att vara inloggad = går inte att ändra status\n\nexport function displayNotLoggedInTasks(task): void {\n  const inCompleteTasksList = document.querySelector(\n    \"#incompleteTasks\"\n  ) as HTMLDListElement;\n  const taskElementP = document.createElement(\"li\");\n  taskElementP.classList.add(\"taskElement\");\n  taskElementP.innerHTML = `<p class=\"taskElementTitle\">${task.title}</p><p class =\"taskElementText\">Role: ${task.role}</p><p class=\"taskElementPtext\">Description:</p> ${task.description} <p class=\"taskElementPtext\">Assigned to: ${task.username}</p><p class=\"taskElementPtext\">Created: ${task.timeStamp}</p><p class=\"\"taskElementPtext>Due: ${task.dueDate}</p>`;\n  inCompleteTasksList.append(taskElementP);\n}\n\n// visar options (medlemmar) för att assigna tasks\n\nexport async function displayOptions(selectElement): Promise<void> {\n  selectElement.innerHTML = \"\";\n  const members = await getAll();\n  const notAssignedOption = document.createElement(\"option\");\n  notAssignedOption.value = \"not-assigned\";\n  notAssignedOption.innerText = \"Not Assigned\";\n  const anyOptions = document.createElement(\"option\");\n  anyOptions.value = \"any\";\n  anyOptions.innerText = \"any\";\n  members.forEach((member) => {\n    const option = document.createElement(\"option\");\n    (option.value = member.username), member.role;\n    option.innerText = `Member: ${member.username}, Role: ${member.role}`;\n    selectElement.append(notAssignedOption, option, anyOptions);\n  });\n}\n\n\n","import { checkNotAssignedTask } from \"../Rendering Functions/displayingFunction\";\nimport { updateIsCompleteUrl } from \"./urls\";\nimport { deleteTaskUrl } from \"./urls\";\nimport { updateAssignedUserUrl } from \"./urls\";\n\nexport async function updateIsComplete(\n  taskID: number,\n  taskStatus: boolean\n): Promise<void> {\n  console.log(taskID, taskStatus);\n  const body = {\n    isComplete: taskStatus,\n  };\n  const options = {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  try {\n    const response = await fetch(updateIsCompleteUrl + taskID, options);\n    const data = await response.json();\n    console.log(data);\n  } catch (e) {\n    console.log(\"Error updating task\", e);\n  }\n}\n\nexport async function deleteTask(taskID: number): Promise<void> {\n  const options = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  try {\n    const response = await fetch(deleteTaskUrl + taskID, options);\n    const data = await response.json();\n    await checkNotAssignedTask();\n    console.log(data);\n  } catch (e) {\n    console.log(\"Error deleting task\", e);\n  }\n}\n\nexport async function updateAssignedUser(taskID: number, username: string) {\n  const body = {\n    username: username,\n  };\n  const options = {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  try {\n    const response = await fetch(updateAssignedUserUrl + taskID, options);\n    const data = await response.json();\n    console.log(data);\n  } catch (e) {\n    console.log(\"Error updating task\", e);\n  }\n}\n","import { getAllTasksUrl } from \"./urls\";\nimport { Task } from \"../Rendering Functions/TaskClass\";\n\nexport async function getAllTasks():Promise<Task[]>{\n    try{\n        const response = await fetch(getAllTasksUrl);\n        const tasks = await response.json();\n        return tasks;\n    } catch(e){\n        console.log('Error getting tasks', e);\n        return [];\n    }\n}","import { writeTaskForMember } from \"../Fetching Functions/memberFunctions\";\nimport { getTasksForMember } from \"../Fetching Functions/memberFunctions\";\nimport { updateIsComplete } from \"../Fetching Functions/updateFunctions\";\n\nexport class Task {\n    public title: string;\n    public username: string;\n    public readonly description: string;\n    public readonly role: string;\n    public readonly dueDate: string;\n    public isComplete: boolean;\n    public timeStamp: string;\n    public id:number;\n\n    constructor(\n        title: string,\n        username: string,\n        role: string,\n        description: string,\n        dueDate: string,\n        isComplete: boolean,\n        timeStamp?: string\n    ) {\n        this.title = title;\n        this.username = username;\n        this.description = description;\n        this.role = role;\n        this.dueDate = dueDate;\n        this.isComplete = isComplete;\n        this.timeStamp = timeStamp || new Date().toISOString(); // Default to current time\n    }\n\n    // Create a new task and send it to the server using the writeTaskForMember function\n    async createNewTask(): Promise<void> {\n        const taskData = {\n            title: this.title,\n            username: this.username,\n            role: this.role,\n            description: this.description,\n            dueDate: this.dueDate,\n            isComplete: this.isComplete,\n            timeStamp: this.timeStamp // Include the timestamp\n        };\n        await writeTaskForMember(taskData); // Send the task data to the server\n    }\n    static async displayTasks(username: string): Promise<void> {\n        const previousDOM = document.querySelectorAll('.taskElement');\n        previousDOM.forEach((element) => {\n            element.remove();\n        });\n\n        const tasks = await getTasksForMember(username); // Assuming this fetches the tasks for the user\n        tasks.forEach((task: Task) => {\n            if (task.username === 'not-assigned') {\n                const taskElement = document.createElement('div');\n                taskElement.classList.add('taskElementLoggedIn');\n                taskElement.innerHTML = `\n                <p>Title: ${task.title}</p>\n                    <p>Assigned to: ${task.username}</p>\n                    <p>For role: ${task.role}</p>\n                    <p>Task: ${task.description}</p>\n                    <p>Deadline: ${task.dueDate}</p>\n                    <p>Task ID: ${task.id}</p>\n                    <input type=\"checkbox\" id=\"isCompletedBox\">Status: ${task.isComplete}</input>`;\n\n                const isCompletedBox = taskElement.querySelector('#isCompletedBox') as HTMLInputElement;\n                if (task.isComplete) {\n                    isCompletedBox.checked = true;\n                } else {\n                    isCompletedBox.checked = false;\n                }\n\n                isCompletedBox.addEventListener('change', async (e) => {\n                    await updateIsComplete(task.id, isCompletedBox.checked);\n                    Task.displayTasks(task.username); // Refresh task list after update\n                });\n\n                document.body.appendChild(taskElement);\n            }\n        });\n    }\n}\n\n"],"names":["$61a1419b200061f5$export$3b8335eaeaa275bb","constructor","username","email","role","displayUser","loginWrapper","document","querySelector","prevMember","remove","member","createElement","classList","add","innerHTML","append","displayMember","$ccd88fcb2f896b18$export$3b976e5ae6742b6f","$ccd88fcb2f896b18$export$9bc59a7b7810c656","$ccd88fcb2f896b18$export$14b851330a0f8b0","$296c32cd85a6333a$export$d8af3e293177d2e4","taskID","taskStatus","console","log","options","method","headers","body","JSON","stringify","isComplete","response","fetch","data","json","e","$296c32cd85a6333a$export$f08d315250e1aa23","$296c32cd85a6333a$export$6fb927533e33c19f","$bd0af301607e61d9$export$d1f442602a91e7cc","$63a8eb5888c938a0$export$1c8f61c1db5300d2","raw","tasks","forEach","task","$63a8eb5888c938a0$export$4db8688a7d2f0d0b","completedTasksList","taskElementC","removeBtn","addEventListener","id","inCompleteTasksList","incompleteTaskElements","querySelectorAll","element","includes","description","removeChild","title","$63a8eb5888c938a0$export$e2f2ebb8b3048124","incompleteTasksList","$63a8eb5888c938a0$export$6a75eb26f8a10018","taskElementP","timeStamp","dueDate","$63a8eb5888c938a0$export$32d4a25b5d64945c","$63a8eb5888c938a0$var$removeElements","$63a8eb5888c938a0$export$c125ae63e3017b3f","$63a8eb5888c938a0$export$9516eb7ae2debb86","$63a8eb5888c938a0$export$324249bdac25123c","taskElement","boxDiv","updateCheckbox","label","innerText","type","checked","prevDOM","notAssignedTasksList","taskElementN","assignUsersForm","assignedMemberOptions","notAssignedOption","value","members","option","saveBtn","preventDefault","selectedUsername","selectedMember","find","alert","$63a8eb5888c938a0$export$e161bc0b9865a0b7","selectElement","anyOptions","$542f0c3884e1da14$export$2774c37398bee8b2","map","$542f0c3884e1da14$export$de7836936cff7bdc","Date","now","currentMemebers","$050458113e8d78dc$export$42e24cc2afc41ad1","error","$542f0c3884e1da14$export$e426fadba00ce51d","res","status","length","$542f0c3884e1da14$export$9d4481e90f4ba95c","taskData","formattedTimestamp","date","toISOString","toLocaleDateString","year","month","day","user","Error","$017ef8b2feb1dd2e$export$1c8c8f897dfba1a8","$d20e1950a5e30632$export$2dea7024bcdd7731","createNewTask","displayTasks","previousDOM","isCompletedBox","appendChild","$050458113e8d78dc$export$56c2ba9e13461f38","formData","FormData","get","$050458113e8d78dc$var$addTaskForm","newTask","$050458113e8d78dc$var$createUserForm","$050458113e8d78dc$var$memberSelectFilter","$050458113e8d78dc$var$createAccountDropDown","$050458113e8d78dc$var$filterDropDown","$050458113e8d78dc$var$createAccountBox","$050458113e8d78dc$var$createAccountArrow","$050458113e8d78dc$var$filterBox","$050458113e8d78dc$var$filterArrow","toggle"],"version":3,"file":"index.42363fcf.js.map"}